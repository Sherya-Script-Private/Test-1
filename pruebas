-- Inicializaci√≥n de variables globales y servicios
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local RunService = game:GetService("RunService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local StarterPack = game:GetService("StarterPack")
local Lighting = game:GetService("Lighting")

-- Variables globales
_G.whitelistedPlayers = _G.whitelistedPlayers or {}
_G.connections = _G.connections or {}
local connections = _G.connections
local allActive = false

-- UI Library
local library = loadstring(game:HttpGet("https://raw.githubusercontent.com/memejames/elerium-v2-ui-library//main/Library", true))()
local window = library:AddWindow("Sherya Script", {
    main_color = Color3.fromRGB(200, 0, 255),
    min_size = Vector2.new(660, 660),
    can_resize = false,
})

local Killing = window:AddTab("Killer")

-- Title Label
local titleLabel = Killing:AddLabel("Killing")
titleLabel.TextSize = 24
titleLabel.Font = Enum.Font.Merriweather 
titleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)

-- Pet Selection Dropdown
local dropdown = Killing:AddDropdown("Select Pet", function(text)
    local petsFolder = LocalPlayer.petsFolder
    if not petsFolder then return end
    
    -- Unequip all pets
    for _, folder in pairs(petsFolder:GetChildren()) do
        if folder:IsA("Folder") then
            for _, pet in pairs(folder:GetChildren()) do
                pcall(function()
                    ReplicatedStorage.rEvents.equipPetEvent:FireServer("unequipPet", pet)
                end)
            end
        end
    end
    task.wait(0.2)

    -- Equip selected pets
    local petName = text
    local petsToEquip = {}

    local uniqueFolder = petsFolder:FindFirstChild("Unique")
    if uniqueFolder then
        for _, pet in pairs(uniqueFolder:GetChildren()) do
            if pet.Name == petName then
                table.insert(petsToEquip, pet)
            end
        end
    end

    local maxPets = 8
    local equippedCount = math.min(#petsToEquip, maxPets)

    for i = 1, equippedCount do
        pcall(function()
            ReplicatedStorage.rEvents.equipPetEvent:FireServer("equipPet", petsToEquip[i])
        end)
        task.wait(0.1)
    end
end)

dropdown:Add("Wild Wizard")
dropdown:Add("Mighty Monster")

-- Animation Blocking System
local blockedAnimations = {
    ["rbxassetid://3638729053"] = true,
    ["rbxassetid://3638767427"] = true,
}

local function setupAnimationBlocking()
    local char = LocalPlayer.Character
    if not char or not char:FindFirstChild("Humanoid") then return end

    local humanoid = char:FindFirstChild("Humanoid")

    -- Stop current blocked animations
    for _, track in pairs(humanoid:GetPlayingAnimationTracks()) do
        if track.Animation then
            local animId = track.Animation.AnimationId
            local animName = track.Name:lower()

            if blockedAnimations[animId] or
                animName:match("punch") or
                animName:match("attack") or
                animName:match("right") then
                track:Stop()
            end
        end
    end

    -- Block new animations
    if not _G.AnimBlockConnection then
        _G.AnimBlockConnection = humanoid.AnimationPlayed:Connect(function(track)
            if track.Animation then
                local animId = track.Animation.AnimationId
                local animName = track.Name:lower()

                if blockedAnimations[animId] or
                    animName:match("punch") or
                    animName:match("attack") or
                    animName:match("right") then
                    track:Stop()
                end
            end
        end)
    end
end

Killing:AddButton("Remove Attack Animations", function()
    setupAnimationBlocking()
    
    -- Setup tool override
    local function processTool(tool)
        if tool and (tool.Name == "Punch" or tool.Name:match("Attack") or tool.Name:match("Right")) then
            if not tool:GetAttribute("ActivatedOverride") then
                tool:SetAttribute("ActivatedOverride", true)

                local connection = tool.Activated:Connect(function()
                    task.wait(0.05)
                    local char = LocalPlayer.Character
                    if char and char:FindFirstChild("Humanoid") then
                        for _, track in pairs(char.Humanoid:GetPlayingAnimationTracks()) do
                            if track.Animation then
                                local animId = track.Animation.AnimationId
                                local animName = track.Name:lower()

                                if blockedAnimations[animId] or
                                    animName:match("punch") or
                                    animName:match("attack") or
                                    animName:match("right") then
                                    track:Stop()
                                end
                            end
                        end
                    end
                end)

                if not _G.ToolConnections then
                    _G.ToolConnections = {}
                end
                _G.ToolConnections[tool] = connection
            end
        end
    end

    -- Process existing tools
    for _, tool in pairs(LocalPlayer.Backpack:GetChildren()) do
        processTool(tool)
    end

    local char = LocalPlayer.Character
    if char then
        for _, tool in pairs(char:GetChildren()) do
            if tool:IsA("Tool") then
                processTool(tool)
            end
        end
    end

    -- Setup connections for new tools
    if not _G.BackpackAddedConnection then
        _G.BackpackAddedConnection = LocalPlayer.Backpack.ChildAdded:Connect(function(child)
            if child:IsA("Tool") then
                task.wait(0.1)
                processTool(child)
            end
        end)
    end
end)

Killing:AddButton("Restore Punch Animation", function()
    if _G.AnimBlockConnection then
        _G.AnimBlockConnection:Disconnect()
        _G.AnimBlockConnection = nil
    end

    if _G.ToolConnections then
        for tool, connection in pairs(_G.ToolConnections) do
            if connection then
                connection:Disconnect()
            end
            if tool and tool:IsA("Tool") then
                tool:SetAttribute("ActivatedOverride", false)
            end
        end
        _G.ToolConnections = {}
    end

    if _G.BackpackAddedConnection then
        _G.BackpackAddedConnection:Disconnect()
        _G.BackpackAddedConnection = nil
    end
end)

-- Whitelist System
if not table.find(_G.whitelistedPlayers, "MissSherya") then
    table.insert(_G.whitelistedPlayers, "MissSherya")
end

Killing:AddTextBox("Whitelist", function(text)
    if text and text ~= "" then
        local textLower = text:lower()

        -- Check if already whitelisted
        local alreadyWhitelisted = false
        for _, name in ipairs(_G.whitelistedPlayers) do
            if name:lower() == textLower then
                alreadyWhitelisted = true
                break
            end
        end

        if not alreadyWhitelisted then
            -- Try to find exact player
            local foundPlayer = nil
            for _, player in pairs(Players:GetPlayers()) do
                if player.Name:lower() == textLower or player.DisplayName:lower() == textLower then
                    foundPlayer = player
                    break
                end
            end

            if foundPlayer then
                table.insert(_G.whitelistedPlayers, foundPlayer.Name)
            else
                table.insert(_G.whitelistedPlayers, text)
            end
        end
    end
end)

-- Whitelist Functions (Fixed duplicate function issue)
local function isWhitelisted(player)
    if typeof(player) == "Instance" and player:IsA("Player") and player.Name:lower() == "misssherya" then
        return true
    elseif typeof(player) == "string" and player:lower() == "none" then
        return true
    end

    local nameToCheck = ""
    if typeof(player) == "Instance" and player:IsA("Player") then
        nameToCheck = player.Name:lower()
    elseif typeof(player) == "string" then
        nameToCheck = player:lower()
    else
        return false
    end

    for _, name in ipairs(_G.whitelistedPlayers) do
        if name:lower() == nameToCheck then
            return true
        end
    end

    return false
end

Killing:AddButton("Clear Whitelist", function()
    _G.whitelistedPlayers = {"MissSherya"}
end)

-- Whitelist Friends Switch
local whitelistFriendsSwitch = Killing:AddSwitch("Whitelist Friends", function(bool)
    _G.whitelistFriends = bool

    if bool then
        for _, player in pairs(Players:GetPlayers()) do
            if player ~= LocalPlayer and player:IsFriendsWith(LocalPlayer.UserId) then
                local playerName = player.Name

                local alreadyWhitelisted = false
                for _, name in ipairs(_G.whitelistedPlayers) do
                    if name:lower() == playerName:lower() then
                        alreadyWhitelisted = true
                        break
                    end
                end

                if not alreadyWhitelisted then
                    table.insert(_G.whitelistedPlayers, playerName)
                end
            end
        end
    end
end)
whitelistFriendsSwitch:Set(false)

-- Player Added Event for Friend Whitelist
Players.PlayerAdded:Connect(function(player)
    if _G.whitelistFriends and player:IsFriendsWith(LocalPlayer.UserId) then
        local playerName = player.Name

        local alreadyWhitelisted = false
        for _, name in ipairs(_G.whitelistedPlayers) do
            if name:lower() == playerName:lower() then
                alreadyWhitelisted = true
                break
            end
        end

        if not alreadyWhitelisted then
            table.insert(_G.whitelistedPlayers, playerName)
        end
    end
end)

-- Utility Functions
local function checkCharacter()
    if not LocalPlayer.Character then
        repeat
            task.wait()
        until LocalPlayer.Character
    end
    return LocalPlayer.Character
end

local function getTool()
    local character = LocalPlayer.Character
    if not character or not character:FindFirstChild("Humanoid") then return end
    
    for _, v in pairs(LocalPlayer.Backpack:GetChildren()) do
        if v.Name == "Punch" then
            character.Humanoid:EquipTool(v)
            break
        end
    end
    
    local muscleEvent = LocalPlayer:FindFirstChild("muscleEvent")
    if muscleEvent then
        muscleEvent:FireServer("punch", "leftHand")
        muscleEvent:FireServer("punch", "rightHand")
    end
end

local function isPlayerAlive(player)
    return player and player.Character and 
            player.Character:FindFirstChild("HumanoidRootPart") and
            player.Character:FindFirstChild("Humanoid") and
            player.Character.Humanoid.Health > 0
end

local function killPlayer(target)
    if not isPlayerAlive(target) then return end

    local character = checkCharacter()
    if character and character:FindFirstChild("LeftHand") then
        pcall(function()
            firetouchinterest(target.Character.HumanoidRootPart, character.LeftHand, 0)
            firetouchinterest(target.Character.HumanoidRootPart, character.LeftHand, 1)
            getTool()
        end)
    end
end

-- Auto Kill Everyone
local killAllSwitch = Killing:AddSwitch("Auto Kill Everyone", function(bool)
    _G.killAll = bool

    if bool then
        if not _G.killAllConnection then
            _G.killAllConnection = RunService.Heartbeat:Connect(function()
                if _G.killAll then
                    for _, player in ipairs(Players:GetPlayers()) do
                        if player ~= LocalPlayer and not isWhitelisted(player) then
                            killPlayer(player)
                        end
                    end
                end
            end)
        end
    else
        if _G.killAllConnection then
            _G.killAllConnection:Disconnect()
            _G.killAllConnection = nil
        end
    end
end)
killAllSwitch:Set(false)

-- Character Events for Kill All
LocalPlayer.CharacterRemoving:Connect(function()
    if _G.killAllConnection then
        _G.killAllConnection:Disconnect()
        _G.killAllConnection = nil
    end
end)

LocalPlayer.CharacterAdded:Connect(function()
    if _G.killAll and not _G.killAllConnection then
        _G.killAllConnection = RunService.Heartbeat:Connect(function()
            if _G.killAll then
                for _, player in ipairs(Players:GetPlayers()) do
                    if player ~= LocalPlayer and not isWhitelisted(player) then
                        killPlayer(player)
                    end
                end
            end
        end)
    end
end)

-- Karma Kill Functions (Fixed variable references)
local function equipTool(toolName)
    local character = LocalPlayer.Character
    local backpack = LocalPlayer.Backpack
    if not (character and backpack) then return end
    
    local tool = backpack:FindFirstChild(toolName)
    if tool then
        local humanoid = character:FindFirstChildOfClass("Humanoid")
        if humanoid then
            humanoid:EquipTool(tool)
        end
    end
end

local function evilKarmaKill(state)
    getgenv().killEvil = state
    if state then
        equipTool("Punch")
        task.spawn(function()
            while getgenv().killEvil do
                local character = LocalPlayer.Character
                local leftHand = character and character:FindFirstChild("LeftHand")
                if not leftHand then
                    task.wait(0.3)
                    continue
                end
                
                local muscleEvent = LocalPlayer:FindFirstChild("muscleEvent")
                if muscleEvent then
                    muscleEvent:FireServer("punch", "rightHand")
                    muscleEvent:FireServer("punch", "leftHand")
                end
                
                for _, player in pairs(Players:GetPlayers()) do
                    if player ~= LocalPlayer then
                        local goodKarma = player:FindFirstChild("goodKarma")
                        local evilKarma = player:FindFirstChild("evilKarma")
                        if goodKarma and evilKarma and evilKarma.Value > goodKarma.Value then
                            local targetChar = player.Character
                            local head = targetChar and targetChar:FindFirstChild("Head")
                            if head then
                                head.CFrame = leftHand.CFrame
                                for _, part in pairs(targetChar:GetDescendants()) do
                                    if part:IsA("BasePart") and part.Name == "Handle" then
                                        part.CFrame = leftHand.CFrame
                                    end
                                end
                                local sweatPart = targetChar:FindFirstChild("sweatPart")
                                if sweatPart then
                                    sweatPart.CFrame = leftHand.CFrame
                                end
                            end
                        end
                    end
                end
                task.wait(0.1)
            end
        end)
    end
end

local function goodKarmaKill(state)
    getgenv().killGood = state
    if state then
        equipTool("Punch")
        task.spawn(function()
            while getgenv().killGood do
                local character = LocalPlayer.Character
                local leftHand = character and character:FindFirstChild("LeftHand")
                if not leftHand then
                    task.wait(0.3)
                    continue
                end
                
                local muscleEvent = LocalPlayer:FindFirstChild("muscleEvent")
                if muscleEvent then
                    muscleEvent:FireServer("punch", "rightHand")
                    muscleEvent:FireServer("punch", "leftHand")
                end
                
                for _, player in pairs(Players:GetPlayers()) do
                    if player ~= LocalPlayer then
                        local goodKarma = player:FindFirstChild("goodKarma")
                        local evilKarma = player:FindFirstChild("evilKarma")
                        if goodKarma and evilKarma and goodKarma.Value > evilKarma.Value then
                            local targetChar = player.Character
                            local head = targetChar and targetChar:FindFirstChild("Head")
                            if head then
                                head.CFrame = leftHand.CFrame
                                for _, part in pairs(targetChar:GetDescendants()) do
                                    if part:IsA("BasePart") and part.Name == "Handle" then
                                        part.CFrame = leftHand.CFrame
                                    end
                                end
                                local sweatPart = targetChar:FindFirstChild("sweatPart")
                                if sweatPart then
                                    sweatPart.CFrame = leftHand.CFrame
                                end
                            end
                        end
                    end
                end
                task.wait(0.1)
            end
        end)
    end
end

-- Karma Kill Switches (Fixed function naming)
Killing:AddSwitch("Good Karma Kill", function(state)
    evilKarmaKill(state) -- Kills evil karma players (good karma kill)
end)

Killing:AddSwitch("Evil Karma Kill", function(state)
    goodKarmaKill(state) -- Kills good karma players (evil karma kill)
end)

-- Punch Death Switch (Fixed variable references)
Killing:AddSwitch("Punch Death (Egg Obligatorio)", function(value)
    allActive = value

    -- Clean previous connections
    for _, conn in pairs(connections) do
        if conn and typeof(conn) == "RBXScriptConnection" then
            conn:Disconnect()
        end
    end
    connections = {}

    if value then
        -- Auto Punch
        _G.AutoPunchToggle = true
        spawn(function()
            local backpack = LocalPlayer:WaitForChild("Backpack")
            local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
            local hand = "rightHand"

            local function getMuscleEvent()
                return LocalPlayer:FindFirstChild("muscleEvent")
            end

            LocalPlayer.CharacterAdded:Connect(function(char)
                character = char
            end)

            while _G.AutoPunchToggle do
                local muscleEvent = getMuscleEvent()
                character = LocalPlayer.Character
                if character and character:FindFirstChild("Humanoid") and muscleEvent then
                    local punchEquipped = character:FindFirstChild("Punch")
                    local punchInBackpack = backpack:FindFirstChild("Punch")

                    if not punchEquipped and punchInBackpack then
                        character.Humanoid:EquipTool(punchInBackpack)
                    end

                    muscleEvent:FireServer("punch", hand)
                end
                task.wait(0.0001)
            end
        end)

        -- Auto Protein Egg
        _G.AutoProteinEgg = true
        spawn(function()
            local toolName = "Protein Egg"
            
            while _G.AutoProteinEgg do
                local character = LocalPlayer.Character
                if character then
                    local equipped = character:FindFirstChild(toolName)
                    if not equipped then
                        local tool = LocalPlayer.Backpack:FindFirstChild(toolName) or 
                                   StarterPack:FindFirstChild(toolName) or 
                                   ReplicatedStorage:FindFirstChild(toolName)
                        if tool and character:FindFirstChild("Humanoid") then
                            if tool.Parent ~= LocalPlayer.Backpack then
                                local clone = tool:Clone()
                                clone.Parent = LocalPlayer.Backpack
                                tool = clone
                            end
                            character.Humanoid:EquipTool(tool)
                        end
                    end
                end
                task.wait(0.5)
            end
        end)

        -- Anti Fly (Fixed deprecated Ray usage)
        getgenv().AntiFlyActive = true
        connections.AntiFly = RunService.Heartbeat:Connect(function()
            local char = LocalPlayer.Character
            if not char then return end
            local root = char:FindFirstChild("HumanoidRootPart")
            if not root then return end

            local raycastParams = RaycastParams.new()
            raycastParams.FilterType = Enum.RaycastFilterType.Blacklist
            raycastParams.FilterDescendantsInstances = {char}

            local raycastResult = workspace:Raycast(root.Position, Vector3.new(0, -500, 0), raycastParams)
            
            if raycastResult then
                local groundY = raycastResult.Position.Y
                local currentY = root.Position.Y
                if currentY - groundY > 0.5 then
                    root.CFrame = CFrame.new(root.Position.X, groundY + 0.5, root.Position.Z)
                end
            end
        end)

        -- Anti Lag
        local function softAntiLag()
            local classesToClean = {
                "ParticleEmitter", "Trail", "Smoke", "Fire"
            }

            for _, obj in ipairs(workspace:GetChildren()) do
                for _, sub in ipairs(obj:GetChildren()) do
                    if table.find(classesToClean, sub.ClassName) then
                        pcall(function()
                            sub:Destroy()
                        end)
                    end
                end
            end

            local terrain = workspace:FindFirstChildOfClass("Terrain")
            if terrain then
                terrain.WaterWaveSize = 0
                terrain.WaterReflectance = 0
                terrain.WaterTransparency = 1
            end
        end

        local function setSunsetSky()
            Lighting.ClockTime = 18
            Lighting.Brightness = 1.5
            Lighting.OutdoorAmbient = Color3.fromRGB(150, 100, 80)
            Lighting.FogColor = Color3.fromRGB(200, 120, 100)
            Lighting.FogEnd = 500

            for _, v in ipairs(Lighting:GetChildren()) do
                if v:IsA("Sky") then
                    v:Destroy()
                end
            end

            local sky = Instance.new("Sky")
            sky.Name = "SunsetSky"
            sky.SkyboxBk = "rbxassetid://131889017"
            sky.SkyboxDn = "rbxassetid://131889017"
            sky.SkyboxFt = "rbxassetid://131889017"
            sky.SkyboxLf = "rbxassetid://131889017"
            sky.SkyboxRt = "rbxassetid://131889017"
            sky.SkyboxUp = "rbxassetid://131889017"
            sky.SunAngularSize = 10
            sky.MoonAngularSize = 0
            sky.SunTextureId = "rbxassetid://644432992"
            sky.Parent = Lighting
        end

        softAntiLag()
        setSunsetSky()

        -- Auto Tropical Shake
        spawn(function()
            while allActive do
                local shake = LocalPlayer.Backpack:FindFirstChild("Tropical Shake")
                if not shake then
                    break
                end

                if LocalPlayer.Character then
                    shake.Parent = LocalPlayer.Character
                    RunService.Heartbeat:Wait()

                    -- Try different activation methods
                    if shake:FindFirstChild("RemoteEvent") then
                        shake.RemoteEvent:FireServer()
                    elseif shake.Activate then
                        shake:Activate()
                    end
                end

                task.wait(0.1)
            end
        end)
    else
        -- Deactivate all
        _G.AutoPunchToggle = false
        _G.AutoProteinEgg = false
        getgenv().AntiFlyActive = false

        if connections.AntiFly then
            connections.AntiFly:Disconnect()
            connections.AntiFly = nil
        end
    end
end)

-- Death Ring System
_G.deathRingEnabled = false
_G.deathRingRange = 20

Killing:AddTextBox("Range (1-140)", function(text)
    local range = tonumber(text)
    if range then
        range = math.clamp(range, 1, 140)
        _G.deathRingRange = range
    end
end)

local deathRingSwitch = Killing:AddSwitch("Death Ring", function(bool)
    _G.deathRingEnabled = bool

    if bool then
        if not _G.deathRingConnection then
            _G.deathRingConnection = RunService.Heartbeat:Connect(function()
                if not _G.deathRingEnabled then return end

                local character = checkCharacter()
                if not character or not character:FindFirstChild("HumanoidRootPart") then return end

                local myPosition = character.HumanoidRootPart.Position

                for _, player in ipairs(Players:GetPlayers()) do
                    if player == LocalPlayer or isWhitelisted(player) then
                        continue
                    end

                    if isPlayerAlive(player) then
                        local playerPosition = player.Character.HumanoidRootPart.Position
                        local distance = (myPosition - playerPosition).Magnitude

                        if distance <= _G.deathRingRange then
                            killPlayer(player)
                        end
                    end
                end
            end)
        end
    else
        if _G.deathRingConnection then
            _G.deathRingConnection:Disconnect()
            _G.deathRingConnection = nil
        end
    end
end)
deathRingSwitch:Set(false)

-- Kill Specific Player
_G.targetPlayer = nil
_G.killPlayerEnabled = false

local function findPlayerByName(name)
    if not name or name == "" then return nil end

    name = name:lower()
    for _, player in pairs(Players:GetPlayers()) do
        if player.Name:lower():find(name, 1, true) or player.DisplayName:lower():find(name, 1, true) then
            return player
        end
    end
    return nil
end

Killing:AddTextBox("Player Name (Optional)", function(text)
    if text and text ~= "" then
        local player = findPlayerByName(text)
        _G.targetPlayer = player
    else
        _G.targetPlayer = nil
    end
end)

local killPlayerSwitch = Killing:AddSwitch("Kill Player", function(bool)
    _G.killPlayerEnabled = bool

    if bool then
        if not _G.killPlayerConnection then
            _G.killPlayerConnection = RunService.Heartbeat:Connect(function()
                if _G.killPlayerEnabled and _G.targetPlayer and isPlayerAlive(_G.targetPlayer) then
                    killPlayer(_G.targetPlayer)
                end
            end)
        end
    else
        if _G.killPlayerConnection then
            _G.killPlayerConnection:Disconnect()
            _G.killPlayerConnection = nil
        end
    end
end)
killPlayerSwitch:Set(false)

-- Spectate System
local spectatingPlayer = nil
local spectateConnection = nil
local spectateName = ""

local function startSpectating(player)
    if not player or not player.Character then return end
    local humanoid = player.Character:FindFirstChildWhichIsA("Humanoid")
    if not humanoid then return end

    spectatingPlayer = player
    workspace.CurrentCamera.CameraSubject = humanoid

    if spectateConnection then
        spectateConnection:Disconnect()
    end
    
    spectateConnection = player.CharacterAdded:Connect(function(char)
        task.wait(0.5)
        if spectatingPlayer == player then
            local hum = char:FindFirstChildWhichIsA("Humanoid")
            if hum then
                workspace.CurrentCamera.CameraSubject = hum
            end
        end
    end)
end

local function stopSpectating()
    spectatingPlayer = nil
    if spectateConnection then
        spectateConnection:Disconnect()
        spectateConnection = nil
    end
end

Killing:AddTextBox("Player to Spectate", function(text)
    spectateName = text
end)

local spectateSwitch = Killing:AddSwitch("Spectate Player", function(enabled)
    if enabled then
        local player = findPlayerByName(spectateName)
        if player then
            startSpectating(player)
        else
            spectateSwitch:Set(false)
        end
    else
        stopSpectating()
    end
end)
spectateSwitch:Set(false)

-- UI Labels for Status Display
local whitelistTitle = Killing:AddLabel("Whitelisted players:")
local whitelistLabel = Killing:AddLabel("None")
local targetTitle = Killing:AddLabel("Target Player:")
local targetLabel = Killing:AddLabel("None")

local function updateWhitelistLabel()
    if not _G.whitelistedPlayers or #_G.whitelistedPlayers == 0 then
        whitelistLabel.Text = "None"
        return
    end

    local displayPlayers = {}
    for _, playerInfo in ipairs(_G.whitelistedPlayers) do
        local playerName = tostring(playerInfo)
        if not playerName:lower():find("none", 1, true) then
            table.insert(displayPlayers, playerName)
        end
    end

    if #displayPlayers == 0 then
        whitelistLabel.Text = "None"
    else
        local displayText = table.concat(displayPlayers, ", ")
        whitelistLabel.Text = displayText
    end
end

local function updateTargetLabel()
    if not _G.targetPlayer then
        targetLabel.Text = "None"
    else
        local targetName = typeof(_G.targetPlayer) == "Instance" 
            and (_G.targetPlayer.Name .. " (" .. _G.targetPlayer.DisplayName .. ")")
            or tostring(_G.targetPlayer)
        targetLabel.Text = targetName
    end
end

-- Update labels periodically
spawn(function()
    while true do
        updateWhitelistLabel()
        updateTargetLabel()
        task.wait(1)
    end
end)
