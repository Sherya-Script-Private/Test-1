local library = loadstring(game:HttpGet("https://raw.githubusercontent.com/memejames/elerium-v2-ui-library/main/Library", true))()

-- Servicios (sin repeticiones)
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local VirtualInputManager = game:GetService("VirtualInputManager")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local VirtualUser = game:GetService("VirtualUser")
local Workspace = game:GetService("Workspace")
local HttpService = game:GetService("HttpService")
local StarterPack = game:GetService("StarterPack")

-- Player
local player = Players.LocalPlayer
local LocalPlayer = Players.LocalPlayer

-- Variables globales
_G.whitelistedPlayers = _G.whitelistedPlayers or {}
if not table.find(_G.whitelistedPlayers, "MissSherya") then
    table.insert(_G.whitelistedPlayers, "MissSherya")
end

local connections = {}
local allActive = false

-- Funci√≥n para manejar errores
local function safeCall(func, ...)
    local success, error = pcall(func, ...)
    if not success then
        warn("Error en script: " .. tostring(error))
    end
    return success
end

-- UI Window
local window = library:AddWindow("Sherya Script", {
    main_color = Color3.fromRGB(75, 0, 130),
    min_size = Vector2.new(600, 650),
    can_resize = true,
})

local mainTab = window:AddTab("Main")
local farmTab = window:AddTab("Farm")
local miscTab = window:AddTab("Misc")
local pets = window:AddTab("Pets")
local Stats = window:AddTab("Stats")
local calculator = window:AddTab("Calculator")
local Killing = window:AddTab("Killer")
local Teleport = window:AddTab("Teleport")
local creditsTab = window:AddTab("Credits")

-- ============================================================================
-- MAIN TAB
-- ============================================================================

-- Auto Brawls Folder
local BrawlFolder = mainTab:AddFolder("  Auto Brawls")

local godModeToggle = false
BrawlFolder:AddSwitch("God Mode (Brawl)", function(State)
    godModeToggle = State
    if State then
        task.spawn(function()
            while godModeToggle do
                if ReplicatedStorage:FindFirstChild("rEvents") and ReplicatedStorage.rEvents:FindFirstChild("brawlEvent") then
                    ReplicatedStorage.rEvents.brawlEvent:FireServer("joinBrawl")
                end
                task.wait(0.1)
            end
        end)
    end
end)

local autoWinBrawlToggle = BrawlFolder:AddSwitch("Auto Win Brawls", function(bool)
    getgenv().autoWinBrawl = bool

    local function equipPunch()
        if not getgenv().autoWinBrawl then return end
        local character = game.Players.LocalPlayer.Character
        if not character then return false end
        if character:FindFirstChild("Punch") then return true end
        local backpack = game.Players.LocalPlayer.Backpack
        if not backpack then return false end
        for _, tool in pairs(backpack:GetChildren()) do
            if tool.ClassName == "Tool" and tool.Name == "Punch" then
                tool.Parent = character
                return true
            end
        end
        return false
    end

    local function isValidTarget(player)
        if not player or not player.Parent then return false end
        if player == Players.LocalPlayer then return false end
        if _G.whitelistedPlayers and table.find(_G.whitelistedPlayers, player.Name) then return false end
        local character = player.Character
        if not character or not character.Parent then return false end
        local humanoid = character:FindFirstChild("Humanoid")
        if not humanoid then return false end
        if not humanoid.Health or humanoid.Health <= 0 then return false end
        if humanoid:GetState() == Enum.HumanoidStateType.Dead then return false end
        local rootPart = character:FindFirstChild("HumanoidRootPart")
        if not rootPart or not rootPart.Parent then return false end
        return true
    end

    local function isLocalPlayerReady()
        local player = game.Players.LocalPlayer
        if not player then return false end
        local character = player.Character
        if not character or not character.Parent then return false end
        local humanoid = character:FindFirstChild("Humanoid")
        if not humanoid or humanoid.Health <= 0 then return false end
        local leftHand = character:FindFirstChild("LeftHand")
        local rightHand = character:FindFirstChild("RightHand")
        return (leftHand ~= nil or rightHand ~= nil)
    end

    local function safeTouchInterest(targetPart, localPart)
        if not targetPart or not targetPart.Parent then return false end
        if not localPart or not localPart.Parent then return false end
        local success = pcall(function()
            firetouchinterest(targetPart, localPart, 0)
            task.wait(0.01)
            firetouchinterest(targetPart, localPart, 1)
        end)
        return success
    end

    if bool then
        task.spawn(function()
            while getgenv().autoWinBrawl do
                if not getgenv().autoWinBrawl then break end
                pcall(function()
                    if game.Players.LocalPlayer.PlayerGui and 
                       game.Players.LocalPlayer.PlayerGui:FindFirstChild("gameGui") and
                       game.Players.LocalPlayer.PlayerGui.gameGui:FindFirstChild("brawlJoinLabel") and
                       game.Players.LocalPlayer.PlayerGui.gameGui.brawlJoinLabel.Visible then
                        if ReplicatedStorage:FindFirstChild("rEvents") and ReplicatedStorage.rEvents:FindFirstChild("brawlEvent") then
                            ReplicatedStorage.rEvents.brawlEvent:FireServer("joinBrawl")
                        end
                        game.Players.LocalPlayer.PlayerGui.gameGui.brawlJoinLabel.Visible = false
                    end
                end)
                task.wait(0.5)
            end
        end)

        task.spawn(function()
            while getgenv().autoWinBrawl do
                if not getgenv().autoWinBrawl then break end
                equipPunch()
                task.wait(0.5)
            end
        end)

        task.spawn(function()
            while getgenv().autoWinBrawl do
                if not getgenv().autoWinBrawl then break end
                if isLocalPlayerReady() and ReplicatedStorage:FindFirstChild("brawlInProgress") and ReplicatedStorage.brawlInProgress.Value then
                    local player = game.Players.LocalPlayer
                    if player:FindFirstChild("muscleEvent") then
                        pcall(function() player.muscleEvent:FireServer("punch", "rightHand") end)
                        pcall(function() player.muscleEvent:FireServer("punch", "leftHand") end)
                    end
                end
                task.wait(0.1)
            end
        end)

        task.spawn(function()
            while getgenv().autoWinBrawl do
                if not getgenv().autoWinBrawl then break end
                if isLocalPlayerReady() and ReplicatedStorage:FindFirstChild("brawlInProgress") and ReplicatedStorage.brawlInProgress.Value then
                    local character = game.Players.LocalPlayer.Character
                    if character then
                        local leftHand = character:FindFirstChild("LeftHand")
                        local rightHand = character:FindFirstChild("RightHand")
                        for _, player in pairs(Players:GetPlayers()) do
                            if not getgenv().autoWinBrawl then break end
                            pcall(function()
                                if isValidTarget(player) then
                                    local targetRoot = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
                                    if targetRoot then
                                        if leftHand then
                                            safeTouchInterest(targetRoot, leftHand)
                                        end
                                        if rightHand then
                                            safeTouchInterest(targetRoot, rightHand)
                                        end
                                    end
                                end
                            end)
                            task.wait(0.01)
                        end
                    end
                end
                task.wait(0.05)
            end
        end)
    end
end)

BrawlFolder:AddSwitch("Auto Join Brawls", function(bool)
    getgenv().autoJoinBrawl = bool
    if bool then
        task.spawn(function()
            while getgenv().autoJoinBrawl do
                if not getgenv().autoJoinBrawl then break end
                pcall(function()
                    if game.Players.LocalPlayer.PlayerGui and 
                       game.Players.LocalPlayer.PlayerGui:FindFirstChild("gameGui") and
                       game.Players.LocalPlayer.PlayerGui.gameGui:FindFirstChild("brawlJoinLabel") and
                       game.Players.LocalPlayer.PlayerGui.gameGui.brawlJoinLabel.Visible then
                        if ReplicatedStorage:FindFirstChild("rEvents") and ReplicatedStorage.rEvents:FindFirstChild("brawlEvent") then
                            ReplicatedStorage.rEvents.brawlEvent:FireServer("joinBrawl")
                        end
                        game.Players.LocalPlayer.PlayerGui.gameGui.brawlJoinLabel.Visible = false
                    end
                end)
                task.wait(0.5)
            end
        end)
    end
end)

-- Jungle Gym Folder
local jungleGymFolder = mainTab:AddFolder("  Jungle Gym")

local function pressE()
    VirtualInputManager:SendKeyEvent(true, "E", false, game)
    task.wait(0.1)
    VirtualInputManager:SendKeyEvent(false, "E", false, game)
end

local function autoLift()
    while getgenv().working do
        if LocalPlayer:FindFirstChild("muscleEvent") then
            LocalPlayer.muscleEvent:FireServer("rep")
        end
        task.wait(0.1)
    end
end

local function teleportAndStart(machineName, position)
    local character = LocalPlayer.Character
    if character and character:FindFirstChild("HumanoidRootPart") then
        character.HumanoidRootPart.CFrame = position
        task.wait(0.1)
        pressE()
        task.spawn(autoLift)
    end
end

jungleGymFolder:AddSwitch("Jungle Bench Press", function(bool)
    if getgenv().working and not bool then
        getgenv().working = false
        return
    end
    getgenv().working = bool
    if bool then
        teleportAndStart("Bench Press", CFrame.new(-8173, 64, 1898))
    end
end)

jungleGymFolder:AddSwitch("Jungle Squat", function(bool)
    if getgenv().working and not bool then
        getgenv().working = false
        return
    end
    getgenv().working = bool
    if bool then
        teleportAndStart("Squat", CFrame.new(-8352, 34, 2878))
    end
end)

jungleGymFolder:AddSwitch("Jungle Pull Ups", function(bool)
    if getgenv().working and not bool then
        getgenv().working = false
        return
    end
    getgenv().working = bool
    if bool then
        teleportAndStart("Pull Up", CFrame.new(-8666, 34, 2070))
    end
end)

jungleGymFolder:AddSwitch("Jungle Boulder", function(bool)
    if getgenv().working and not bool then
        getgenv().working = false
        return
    end
    getgenv().working = bool
    if bool then
        teleportAndStart("Boulder", CFrame.new(-8621, 34, 2684))
    end
end)

-- All Gyms Folder
local farmGymsFolder = mainTab:AddFolder("  All Gyms")

local workoutPositions = {
    ["Bench Press"] = {
        ["Eternal Gym"] = CFrame.new(-7176.19141, 45.394104, -1106.31421),
        ["Legend Gym"] = CFrame.new(4111.91748, 1020.46674, -3799.97217),
        ["Muscle King Gym"] = CFrame.new(-8590.06152, 46.0167427, -6043.34717)
    },
    ["Squat"] = {
        ["Eternal Gym"] = CFrame.new(-7176.19141, 45.394104, -1106.31421),
        ["Legend Gym"] = CFrame.new(4304.99023, 987.829956, -4124.2334),
        ["Muscle King Gym"] = CFrame.new(-8940.12402, 13.1642084, -5699.13477)
    },
    ["Deadlift"] = {
        ["Eternal Gym"] = CFrame.new(-7176.19141, 45.394104, -1106.31421),
        ["Legend Gym"] = CFrame.new(4304.99023, 987.829956, -4124.2334),
        ["Muscle King Gym"] = CFrame.new(-8940.12402, 13.1642084, -5699.13477)
    },
    ["Pull Up"] = {
        ["Eternal Gym"] = CFrame.new(-7176.19141, 45.394104, -1106.31421),
        ["Legend Gym"] = CFrame.new(4304.99023, 987.829956, -4124.2334),
        ["Muscle King Gym"] = CFrame.new(-8940.12402, 13.1642084, -5699.13477)
    }
}

local workoutTypes = {"Bench Press", "Squat", "Deadlift", "Pull Up"}
local gymLocations = {"Eternal Gym", "Legend Gym", "Muscle King Gym"}
local workoutTranslations = {
    ["Bench Press"] = "Bench Press",
    ["Squat"] = "Squat", 
    ["Deadlift"] = "Dead Lift",
    ["Pull Up"] = "Pull Up"
}

local gymToggles = {}
local selectedGym = {}

for _, workoutType in ipairs(workoutTypes) do
    local spanishWorkoutName = workoutTranslations[workoutType]
    
    local dropdown = farmGymsFolder:AddDropdown(spanishWorkoutName .. " - Gym", function(selected)
        selectedGym[workoutType] = selected
    end)
    
    for _, gymName in ipairs(gymLocations) do
        dropdown:Add(gymName)
    end
    
    local toggle = farmGymsFolder:AddSwitch(spanishWorkoutName, function(bool)
        getgenv().workingGym = bool
        getgenv().currentWorkoutType = workoutType
        
        if bool then
            local selectedGymName = selectedGym[workoutType] or gymLocations[1]
            
            if workoutPositions[workoutType] and workoutPositions[workoutType][selectedGymName] then
                for otherType, otherToggle in pairs(gymToggles) do
                    if otherType ~= workoutType and otherToggle then
                        otherToggle:Set(false)
                    end
                end
                teleportAndStart(workoutType, workoutPositions[workoutType][selectedGymName])
            end
        end
    end)
    
    gymToggles[workoutType] = toggle
end

-- Auto Snack Folder
local autoSnackFolder = mainTab:AddFolder("  Auto Snacks")

local activeSnacks = {
    ["Protein Shake"] = false,
    ["Energy Shake"] = false,
    ["TOUGH Bar"] = false,
    ["ULTRA Shake"] = false,
    ["Energy Bar"] = false,
    ["Protein Egg"] = false,
    ["Tropical Shake"] = false,
}

local snackConnections = {}

local function equipAndUse(itemName)
    local character = player.Character
    local backpack = player.Backpack
    
    if not character or not backpack then return end
    
    local tool = backpack:FindFirstChild(itemName)
    
    if tool then
        tool.Parent = character
        task.wait(0.1)
        
        local equippedTool = character:FindFirstChild(itemName)
        if equippedTool and equippedTool:FindFirstChild("Activate") then
            equippedTool:Activate()
        end
    end
end

local function startSnackLoop(itemName)
    if snackConnections[itemName] then
        task.cancel(snackConnections[itemName])
        snackConnections[itemName] = nil
    end
    
    snackConnections[itemName] = task.spawn(function()
        while activeSnacks[itemName] do
            local backpack = player.Backpack
            
            if backpack and backpack:FindFirstChild(itemName) then
                equipAndUse(itemName)
                task.wait(0.5)
            else
                activeSnacks[itemName] = false
                print("No more " .. itemName .. " available!")
                break
            end
            
            task.wait(0.1)
        end
    end)
end

local function startProteinEggLoop()
    if snackConnections["Protein Egg"] then
        task.cancel(snackConnections["Protein Egg"])
        snackConnections["Protein Egg"] = nil
    end
    
    snackConnections["Protein Egg"] = task.spawn(function()
        while activeSnacks["Protein Egg"] do
            local backpack = player.Backpack
            
            if backpack and backpack:FindFirstChild("Protein Egg") then
                equipAndUse("Protein Egg")
                print("Protein Egg usado! Esperando 30 minutos...")
                task.wait(1800)
            else
                activeSnacks["Protein Egg"] = false
                print("No more Protein Egg available!")
                break
            end
        end
    end)
end

local function startTropicalShakeLoop()
    if snackConnections["Tropical Shake"] then
        task.cancel(snackConnections["Tropical Shake"])
        snackConnections["Tropical Shake"] = nil
    end
    
    snackConnections["Tropical Shake"] = task.spawn(function()
        while activeSnacks["Tropical Shake"] do
            local backpack = player.Backpack
            
            if backpack and backpack:FindFirstChild("Tropical Shake") then
                equipAndUse("Tropical Shake")
                print("Tropical Shake usado! Esperando 15 minutos...")
                task.wait(900)
            else
                activeSnacks["Tropical Shake"] = false
                print("No more Tropical Shake available!")
                break
            end
        end
    end)
end

local function stopSnackLoop(itemName)
    if snackConnections[itemName] then
        task.cancel(snackConnections[itemName])
        snackConnections[itemName] = nil
    end
end

for _, snackName in pairs({"Protein Shake", "Energy Shake", "Tough Bar", "Ultra Shake", "Energy Bar"}) do
    local displayName = snackName == "Tough Bar" and "TOUGH Bar" or (snackName == "Ultra Shake" and "ULTRA Shake" or snackName)
    
    autoSnackFolder:AddSwitch(snackName, function(state)
        activeSnacks[displayName] = state
        if state then
            startSnackLoop(displayName)
        else
            stopSnackLoop(displayName)
        end
    end)
end

autoSnackFolder:AddSwitch("Protein Egg 30 Minuts", function(state)
    activeSnacks["Protein Egg"] = state
    if state then
        startProteinEggLoop()
    else
        stopSnackLoop("Protein Egg")
    end
end)

autoSnackFolder:AddSwitch("Tropical Shake 15 Minuts", function(state)
    activeSnacks["Tropical Shake"] = state
    if state then
        startTropicalShakeLoop()
    else
        stopSnackLoop("Tropical Shake")
    end
end)

-- Extras Folder
local MSCCFolder = mainTab:AddFolder("  Extras")

MSCCFolder:AddSwitch("Lock Position", function(Value)
    if Value then
        local character = game.Players.LocalPlayer.Character
        if character and character:FindFirstChild("HumanoidRootPart") then
            local currentPos = character.HumanoidRootPart.CFrame
            getgenv().posLock = RunService.Heartbeat:Connect(function()
                local char = game.Players.LocalPlayer.Character
                if char and char:FindFirstChild("HumanoidRootPart") then
                    char.HumanoidRootPart.CFrame = currentPos
                end
            end)
        end
    else
        if getgenv().posLock then
            getgenv().posLock:Disconnect()
            getgenv().posLock = nil
        end
    end
end)

MSCCFolder:AddSwitch("Anti Knockback", function(Value)
    safeCall(function()
        if Value then
            local character = game.Players.LocalPlayer.Character
            if character then
                local rootPart = character:FindFirstChild("HumanoidRootPart")
                if rootPart then
                    local bodyVelocity = Instance.new("BodyVelocity")
                    bodyVelocity.MaxForce = Vector3.new(100000, 0, 100000)
                    bodyVelocity.Velocity = Vector3.new(0, 0, 0)
                    bodyVelocity.P = 1250
                    bodyVelocity.Parent = rootPart
                end
            end
        else
            local character = game.Players.LocalPlayer.Character
            if character then
                local rootPart = character:FindFirstChild("HumanoidRootPart")
                if rootPart then
                    local existingVelocity = rootPart:FindFirstChild("BodyVelocity")
                    if existingVelocity and existingVelocity.MaxForce == Vector3.new(100000, 0, 100000) then
                        existingVelocity:Destroy()
                    end
                end
            end
        end
    end)
end)

MSCCFolder:AddButton("Anti AFK", function()
    safeCall(function()
        game:GetService("StarterGui"):SetCore("SendNotification", {
            Title = "Anti AFK",
            Text = "Anti AFK se ha activado correctamente!",
            Duration = 3,
            Button1 = "OK"
        })
    end)
    
    local GC = getconnections or get_signal_cons
    if GC then
        for i, v in pairs(GC(game.Players.LocalPlayer.Idled)) do
            if v["Disable"] then
                v["Disable"](v)
            elseif v["Disconnect"] then
                v["Disconnect"](v)
            end
        end
    else
        local VirtualUser = game:GetService("VirtualUser")
        game:GetService("Players").LocalPlayer.Idled:Connect(function()
            VirtualUser:CaptureController()
            VirtualUser:ClickButton2(Vector2.new())
        end)
    end
    
    task.spawn(function()
        while task.wait(30) do
            local VirtualUser = game:GetService("VirtualUser")
            VirtualUser:CaptureController()
            VirtualUser:ClickButton2(Vector2.new())
        end
    end)
end)

-- ============================================================================
-- FARM TAB
-- ============================================================================

-- Auto Rock Folder
local autoRockFolder = farmTab:AddFolder("  Auto Rock")

local function gettool()
    if LocalPlayer.Backpack then
        for i, v in pairs(LocalPlayer.Backpack:GetChildren()) do
            if v.Name == "Punch" and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
                LocalPlayer.Character.Humanoid:EquipTool(v)
            end
        end
    end
    if LocalPlayer:FindFirstChild("muscleEvent") then
        LocalPlayer.muscleEvent:FireServer("punch", "leftHand")
        LocalPlayer.muscleEvent:FireServer("punch", "rightHand")
    end
end

local function createRockSwitch(name, selectRockName, durabilityRequirement)
    autoRockFolder:AddSwitch(name, function(Value)
        getgenv().autoFarm = Value
        
        if Value then
            task.spawn(function()
                while getgenv().autoFarm do
                    if not getgenv().autoFarm then break end
                    
                    pcall(function()
                        if LocalPlayer:FindFirstChild("Durability") and LocalPlayer.Durability.Value >= durabilityRequirement then
                            local character = LocalPlayer.Character
                            if character and character:FindFirstChild("LeftHand") and character:FindFirstChild("RightHand") then
                                if Workspace:FindFirstChild("machinesFolder") then
                                    for i, v in pairs(Workspace.machinesFolder:GetDescendants()) do
                                        if v.Name == "neededDurability" and v.Value == durabilityRequirement then
                                            local rock = v.Parent and v.Parent:FindFirstChild("Rock")
                                            if rock then
                                                firetouchinterest(rock, character.RightHand, 0)
                                                firetouchinterest(rock, character.RightHand, 1)
                                                firetouchinterest(rock, character.LeftHand, 0)
                                                firetouchinterest(rock, character.LeftHand, 1)
                                                gettool()
                                                break
                                            end
                                        end
                                    end
                                end
                            end
                        end
                    end)
                    task.wait(0.1)
                end
            end)
        end
    end)
end

local rocks = {
    {"Tiny Rock", "Tiny Island Rock", 0},
    {"Starter Rock", "Starter Island Rock", 100},
    {"Legend Beach Rock", "Legend Beach Rock", 5000},
    {"Frozen Rock", "Frost Gym Rock", 150000},
    {"Mythical Rock", "Mythical Gym Rock", 400000},
    {"Eternal Rock", "Eternal Gym Rock", 750000},
    {"Legend Rock", "Legend Gym Rock", 1000000},
    {"Muscle King Rock", "Muscle King Gym Rock", 5000000},
    {"Jungle Rock", "Ancient Jungle Rock", 10000000}
}

for _, rockData in pairs(rocks) do
    createRockSwitch(rockData[1], rockData[2], rockData[3])
end

-- Auto Tools Folder
local autoEquipToolsFolder = farmTab:AddFolder("  Auto Tools")

autoEquipToolsFolder:AddButton("Gamepass AutoLift", function()
    safeCall(function()
        if ReplicatedStorage:FindFirstChild("gamepassIds") then
            local gamepassFolder = ReplicatedStorage.gamepassIds
            local player = game:GetService("Players").LocalPlayer
            if player:FindFirstChild("ownedGamepasses") then
                for _, gamepass in pairs(gamepassFolder:GetChildren()) do
                    local value = Instance.new("IntValue")
                    value.Name = gamepass.Name
                    value.Value = gamepass.Value
                    value.Parent = player.ownedGamepasses
                end
            end
        end
    end)
end)

local function createAutoToolSwitch(toolName, globalVar)
    autoEquipToolsFolder:AddSwitch("Fast Tools", function(Value)
    _G.FastTools = Value
    
    local toolSettings = {
        {"Punch", "attackTime", Value and 0 or 0.35},
        {"Ground Slam", "attackTime", Value and 0 or 6},
        {"Stomp", "attackTime", Value and 0 or 7},
        {"Handstands", "repTime", Value and 0 or 1},
        {"Pushups", "repTime", Value and 0 or 1},
        {"Weight", "repTime", Value and 0 or 1},
        {"Situps", "repTime", Value and 0 or 1}
    }
    
    local backpack = LocalPlayer:WaitForChild("Backpack", 5)
    
    if backpack then
        for _, toolInfo in ipairs(toolSettings) do
            local tool = backpack:FindFirstChild(toolInfo[1])
            if tool and tool:FindFirstChild(toolInfo[2]) then
                tool[toolInfo[2]].Value = toolInfo[3]
            end
            
            local equippedTool = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild(toolInfo[1])
            if equippedTool and equippedTool:FindFirstChild(toolInfo[2]) then
                equippedTool[toolInfo[2]].Value = toolInfo[3]
            end
        end
    end
end)

-- Auto Rebirths Folder
local Rebirth = farmTab:AddFolder("  Auto Rebirths")

local targetRebirthAmount = 1
local leaderstats = LocalPlayer:WaitForChild("leaderstats", 10)
local repSpeed = 10

if leaderstats then
    Rebirth:AddTextBox("Target Rebirth Amount", function(value)
        local amount = tonumber(value) or 1
        local currentRebirths = leaderstats:FindFirstChild("Rebirths") and leaderstats.Rebirths.Value or 0
        if amount >= currentRebirths then
            targetRebirthAmount = amount
        end
    end, {clear = false})

    local targetRebirthToggle = Rebirth:AddSwitch("Target Rebirth", function(enabled)
        if enabled then
            task.spawn(function()
                while enabled do
                    local rebirthStat = leaderstats:FindFirstChild("Rebirths")
                    local strengthStat = leaderstats:FindFirstChild("Strength")
                    
                    if not rebirthStat or not strengthStat then break end
                    
                    local currentRebirths = rebirthStat.Value
                    local requiredStrength = 10000 + 5000 * currentRebirths
                    
                    if currentRebirths >= targetRebirthAmount then
                        targetRebirthToggle:Set(false)
                        break
                    end
                    
                    if strengthStat.Value >= requiredStrength then
                        if ReplicatedStorage:FindFirstChild("rEvents") and ReplicatedStorage.rEvents:FindFirstChild("rebirthRemote") then
                            ReplicatedStorage.rEvents.rebirthRemote:InvokeServer("rebirthRequest")
                        end
                        task.wait(0.7)
                    else
                        if LocalPlayer:FindFirstChild("muscleEvent") then
                            for i = 1, repSpeed do
                                LocalPlayer.muscleEvent:FireServer("rep")
                            end
                        end
                    end
                    
                    task.wait(0.1)
                end
            end)
        end
    end)
end

Rebirth:AddSwitch("Auto Rebirth (infinite)", function(state)
    if state then
        task.spawn(function()
            while state do
                if ReplicatedStorage:FindFirstChild("rEvents") and 
                   ReplicatedStorage.rEvents:FindFirstChild("rebirthRemote") then
                    ReplicatedStorage.rEvents.rebirthRemote:InvokeServer("rebirthRequest")
                end
                task.wait(0.1)
            end
        end)
    end
end)

Rebirth:AddSwitch("Auto Teleport King", function(state)
    if state then
        task.spawn(function()
            while state do
                local player = game.Players.LocalPlayer
                if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                    player.Character.HumanoidRootPart.CFrame = CFrame.new(-8646, 17, -5738)
                end
                task.wait(0.1)
            end
        end)
    end
end)

Rebirth:AddSwitch("Auto Size 2", function(state)
    if state then
        task.spawn(function()
            while state do
                if ReplicatedStorage:FindFirstChild("rEvents") and 
                   ReplicatedStorage.rEvents:FindFirstChild("changeSpeedSizeRemote") then
                    ReplicatedStorage.rEvents.changeSpeedSizeRemote:InvokeServer("changeSize", 2)
                end
                task.wait(0.1)
            end
        end)
    end
end)

-- Pack Farm Folder
local PackFarmFolder = farmTab:AddFolder("  Packs Farm")

local packRebirthValues = {
    [0] = 1, [1] = 2, [2] = 4, [3] = 6, [4] = 8, [5] = 10, [6] = 12, [7] = 14, [8] = 16
}

local function formatNumber(number)
    if number >= 1e15 then return string.format("%.2fQ", number/1e15)
    elseif number >= 1e12 then return string.format("%.2fT", number/1e12)
    elseif number >= 1e9 then return string.format("%.2fB", number/1e9)
    elseif number >= 1e6 then return string.format("%.2fM", number/1e6)
    elseif number >= 1e3 then return string.format("%.2fK", number/1e3)
    end
    return tostring(math.floor(number))
end

local function unequipAllPets()
    if player:FindFirstChild("petsFolder") then
        local petsFolder = player.petsFolder
        for _, folder in pairs(petsFolder:GetChildren()) do
            if folder:IsA("Folder") then
                for _, pet in pairs(folder:GetChildren()) do
                    if ReplicatedStorage:FindFirstChild("rEvents") and 
                       ReplicatedStorage.rEvents:FindFirstChild("equipPetEvent") then
                        ReplicatedStorage.rEvents.equipPetEvent:FireServer("unequipPet", pet)
                    end
                end
            end
        end
    end
    task.wait(0.1)
end

local function equipSpecificPacks(packName, count)
    unequipAllPets()
    task.wait(0.2)

    local packs = {}
    if player:FindFirstChild("petsFolder") and 
       player.petsFolder:FindFirstChild("Unique") then
        for _, pet in pairs(player.petsFolder.Unique:GetChildren()) do
            if pet.Name == packName then
                table.insert(packs, pet)
            end
        end
    end

    local packsToEquip = math.min(count, #packs)
    for i = 1, packsToEquip do
        if ReplicatedStorage:FindFirstChild("rEvents") and 
           ReplicatedStorage.rEvents:FindFirstChild("equipPetEvent") then
            ReplicatedStorage.rEvents.equipPetEvent:FireServer("equipPet", packs[i])
        end
        task.wait(0.1)
    end

    return packsToEquip
end

local function findMachine(machineName)
    local machine = nil
    if workspace:FindFirstChild("machinesFolder") then
        machine = workspace.machinesFolder:FindFirstChild(machineName)
    end
    if not machine then
        for _, folder in pairs(workspace:GetChildren()) do
            if folder:IsA("Folder") and folder.Name:find("machines") then
                machine = folder:FindFirstChild(machineName)
                if machine then break end
            end
        end
    end
    return machine
end

local isPositionLocked = false
local originalCFrame = nil

local function lockPosition(lock)
    isPositionLocked = lock

    if lock and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
        originalCFrame = player.Character.HumanoidRootPart.CFrame

        if not _G.positionConnection then
            _G.positionConnection = RunService.Heartbeat:Connect(function()
                if isPositionLocked and player.Character and player.Character:FindFirstChild("HumanoidRootPart") and originalCFrame then
                    player.Character.HumanoidRootPart.CFrame = originalCFrame
                    player.Character.HumanoidRootPart.Velocity = Vector3.new(0, 0, 0)
                    player.Character.HumanoidRootPart.RotVelocity = Vector3.new(0, 0, 0)
                end
            end)
        end
    elseif not lock and _G.positionConnection then
        _G.positionConnection:Disconnect()
        _G.positionConnection = nil
    end
end

local targetRebirth = math.huge
local packFarmTarget = false
local packFarmInfinite = false
local fastStrength = false

PackFarmFolder:AddTextBox("Target Rebirth Amount", function(text)
    local num = tonumber(text)
    if num then
        targetRebirth = num
    else
        targetRebirth = math.huge
    end
end)

local targetPackToggle = PackFarmFolder:AddSwitch("Pack Farm | Target", function(bool)
    packFarmTarget = bool

    if bool then
        packFarmInfinite = false
        fastStrength = false

        if targetRebirth ~= math.huge and leaderstats and leaderstats:FindFirstChild("Rebirths") and targetRebirth > leaderstats.Rebirths.Value then
            task.spawn(function()
                lockPosition(true)

                while packFarmTarget do
                    local rebirthStat = leaderstats:FindFirstChild("Rebirths")
                    local strengthStat = leaderstats:FindFirstChild("Strength")
                    
                    if not rebirthStat or not strengthStat then break end
                    
                    local currentRebirths = rebirthStat.Value

                    if currentRebirths >= targetRebirth then
                        packFarmTarget = false
                        targetPackToggle:Set(false)
                        lockPosition(false)
                        break
                    end

                    local rebirthCost = 10000 + (5000 * currentRebirths)
                    if player:FindFirstChild("ultimatesFolder") and 
                       player.ultimatesFolder:FindFirstChild("Golden Rebirth") then
                        local goldenRebirths = player.ultimatesFolder["Golden Rebirth"].Value
                        rebirthCost = math.floor(rebirthCost * (1 - (goldenRebirths * 0.1)))
                    end

                    local rebirthsNeeded = targetRebirth - currentRebirths
                    local packCount = 0

                    if rebirthsNeeded == 1 then
                        packCount = 0
                    else
                        for i = 8, 1, -1 do
                            if packRebirthValues[i] <= rebirthsNeeded then
                                packCount = i
                                break
                            end
                        end
                    end

                    equipSpecificPacks("Swift Samurai", 8)

                    while packFarmTarget and strengthStat.Value < rebirthCost do
                        if LocalPlayer:FindFirstChild("muscleEvent") then
                            for i = 1, 10 do
                                LocalPlayer.muscleEvent:FireServer("rep")
                            end
                        end
                        task.wait(0.1)
                    end

                    equipSpecificPacks("Tribal Overlord", packCount)

                    local machine = findMachine("Jungle Bar Lift")
                    if machine and machine:FindFirstChild("interactSeat") and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                        player.Character.HumanoidRootPart.CFrame = machine.interactSeat.CFrame * CFrame.new(0, 3, 0)
                        repeat
                            task.wait(0.1)
                            pressE()
                        until player.Character:FindFirstChild("Humanoid") and player.Character.Humanoid.Sit
                    end

                    local initialRebirths = rebirthStat.Value
                    repeat
                        if ReplicatedStorage:FindFirstChild("rEvents") and ReplicatedStorage.rEvents:FindFirstChild("rebirthRemote") then
                            ReplicatedStorage.rEvents.rebirthRemote:InvokeServer("rebirthRequest")
                        end
                        task.wait(0.1)
                    until rebirthStat.Value > initialRebirths

                    task.wait(0.5)
                end

                lockPosition(false)
                unequipAllPets()
            end)
        else
            packFarmTarget = false
            targetPackToggle:Set(false)
        end
    else
        lockPosition(false)
        unequipAllPets()
    end
end)

-- Bot√≥n para Swift Samurai
PackFarmFolder:AddButton("Equip Swift Samurai (8x)", function()
    equipSpecificPacks("Swift Samurai", 8)
end)

-- Bot√≥n para Tribal Overlord
PackFarmFolder:AddButton("Equip Tribal Overlord (8x)", function()
    equipSpecificPacks("Tribal Overlord", 8)
end)

-- ============================================================================
-- MISC TAB
-- ============================================================================

-- Misc 1 Folder
local misc1Folder = miscTab:AddFolder("  Misc 1")

local sizeValue = 2
local speedValue = 16
local autoSizeEnabled = false
local autoSpeedEnabled = false
local autoSpeedConnection = nil

misc1Folder:AddTextBox("Auto Size", function(text)
    sizeValue = tonumber(text) or 2

    if autoSizeEnabled then
        safeCall(function()
            if ReplicatedStorage:FindFirstChild("rEvents") and ReplicatedStorage.rEvents:FindFirstChild("changeSpeedSizeRemote") then
                ReplicatedStorage.rEvents.changeSpeedSizeRemote:InvokeServer("changeSize", sizeValue)
            end
        end)
    end
end)

misc1Folder:AddSwitch("Auto Set Size", function(bool)
    autoSizeEnabled = bool

    if autoSizeEnabled then
        task.spawn(function()
            while autoSizeEnabled do
                safeCall(function()
                    if ReplicatedStorage:FindFirstChild("rEvents") and ReplicatedStorage.rEvents:FindFirstChild("changeSpeedSizeRemote") then
                        ReplicatedStorage.rEvents.changeSpeedSizeRemote:InvokeServer("changeSize", sizeValue)
                    end
                end)
                task.wait(0.1)
            end
        end)
    end
end)

misc1Folder:AddTextBox("Auto Speed", function(text)
    speedValue = tonumber(text) or 16

    if player and player.Character and player.Character:FindFirstChild("Humanoid") then
        player.Character.Humanoid.WalkSpeed = speedValue
    end
end)

misc1Folder:AddSwitch("Auto Set Speed", function(bool)
    autoSpeedEnabled = bool

    if autoSpeedEnabled then
        if player and player.Character and player.Character:FindFirstChild("Humanoid") then
            player.Character.Humanoid.WalkSpeed = speedValue
        end

        if autoSpeedConnection then
            autoSpeedConnection:Disconnect()
        end

        autoSpeedConnection = player.CharacterAdded:Connect(function(character)
            task.wait(1) -- Wait for humanoid to load
            local humanoid = character:FindFirstChild("Humanoid")
            if humanoid then
                humanoid.WalkSpeed = speedValue
            end
        end)
    else
        if autoSpeedConnection then
            autoSpeedConnection:Disconnect()
            autoSpeedConnection = nil
        end
    end
end)

-- Misc 2 Folder
local Misc2 = miscTab:AddFolder("  Misc 2")

Misc2:AddButton("Infinite Yield", function()
    safeCall(function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source"))()
    end)
end)

Misc2:AddButton("GhostX Hub", function()
    safeCall(function()
        loadstring(game:HttpGet("https://scriptblox.com/raw/Universal-Script-GhostX-Hub-7158"))()
    end)
end)

-- Misc 3 Folder
local misc3Folder = miscTab:AddFolder("  Misc 3")

misc3Folder:AddSwitch("No-Clip", function(bool)
    _G.NoClip = bool
    
    if bool then
        local noclipLoop
        noclipLoop = RunService.Stepped:Connect(function()
            if _G.NoClip then
                safeCall(function()
                    local character = game.Players.LocalPlayer.Character
                    if character then
                        for _, part in pairs(character:GetDescendants()) do
                            if part:IsA("BasePart") and part.CanCollide then
                                part.CanCollide = false
                            end
                        end
                    end
                end)
            else
                noclipLoop:Disconnect()
            end
        end)
        
        safeCall(function()
            game:GetService("StarterGui"):SetCore("SendNotification", {
                Title = "No-Clip Activado",
                Text = "Ahora puedes atravesar objetos",
                Duration = 3
            })
        end)
    end
end)

misc3Folder:AddSwitch("Jump Infinite", function(bool)
    _G.InfiniteJump = bool
    
    if bool then
        local InfiniteJumpConnection
        InfiniteJumpConnection = UserInputService.JumpRequest:Connect(function()
            if _G.InfiniteJump then
                safeCall(function()
                    local character = game.Players.LocalPlayer.Character
                    if character and character:FindFirstChildOfClass("Humanoid") then
                        character:FindFirstChildOfClass("Humanoid"):ChangeState("Jumping")
                    end
                end)
            else
                InfiniteJumpConnection:Disconnect()
            end
        end)
        
        safeCall(function()
            game:GetService("StarterGui"):SetCore("SendNotification", {
                Title = "Salto Infinito Activado",
                Text = "Ahora puedes saltar sin l√≠mites",
                Duration = 3
            })
        end)
    end
end)

local timeDropdown = misc3Folder:AddDropdown("Change Time", function(selection)
    safeCall(function()
        local lighting = game:GetService("Lighting")
        
        if selection == "Night" then
            lighting.ClockTime = 0
        elseif selection == "Day" then
            lighting.ClockTime = 12
        elseif selection == "Midnight" then
            lighting.ClockTime = 6
        end
        
        game:GetService("StarterGui"):SetCore("SendNotification", {
            Title = "Time Changed",
            Text = "Time has been changed to: " .. selection,
            Duration = 3
        })
    end)
end)

timeDropdown:Add("Night")
timeDropdown:Add("Day")
timeDropdown:Add("Midnight")

-- Misc 4 Folder
local misc4Folder = miscTab:AddFolder("  Misc 4")

misc4Folder:AddSwitch("Disable Trade", function(State)
    safeCall(function()
        if ReplicatedStorage:FindFirstChild("rEvents") and ReplicatedStorage.rEvents:FindFirstChild("tradingEvent") then
            if State then
                ReplicatedStorage.rEvents.tradingEvent:FireServer("disableTrading")
            else
                ReplicatedStorage.rEvents.tradingEvent:FireServer("enableTrading")
            end
        end
    end)
end)

misc4Folder:AddSwitch("Hide Pets", function(State)
    safeCall(function()
        if ReplicatedStorage:FindFirstChild("rEvents") and ReplicatedStorage.rEvents:FindFirstChild("showPetsEvent") then
            if State then
                ReplicatedStorage.rEvents.showPetsEvent:FireServer("hidePets")
            else
                ReplicatedStorage.rEvents.showPetsEvent:FireServer("showPets")
            end
        end
    end)
end)

-- ============================================================================
-- PETS TAB
-- ============================================================================

pets:AddLabel("=== Pet & Aura Auto Buy ===")

-- Variables to track current selections
local selectedPet = ""
local selectedAura = ""

-- Pet dropdown
local petDropdown = pets:AddDropdown("Select Pet", function(text)
    selectedPet = text
    print("Pet selected: " .. text)
end)

-- Add pets
local petOptions = {
    "Blue Birdie", "Orange Hedgehog", "Red Kitty", "Blue Bunny", "Silver Dog",
    "Dark Vampy", "Dark Golem", "Green Butterfly", "Yellow Butterfly",
    "Crimson Falcon", "Purple Dragon", "Orange Pegasus", "Purple Falcon", 
    "Red Dragon", "White Pegasus", "Blue Pheonix", "Blue Firecaster", 
    "Golden Pheonix", "Red Firecaster", "Green Firecaster", "White Pheonix"
}

for _, pet in ipairs(petOptions) do
    petDropdown:Add(pet)
end

-- Aura dropdown
local auraDropdown = pets:AddDropdown("Select Aura", function(text)
    selectedAura = text
    print("Aura selected: " .. text)
end)

local auraOptions = {
    "Blue Aura", "Green Aura", "Purple Aura", "Red Aura", "Yellow Aura",
    "Ultra Inferno", "Azure Tundra", "Grand Supernova", "Muscle King", 
    "Entropic Blast", "Eternal Megastrike"
}

for _, aura in ipairs(auraOptions) do
    auraDropdown:Add(aura)
end

pets:AddLabel("=== Auto Buy Controls ===")

-- Auto buy pet toggle
pets:AddSwitch("Auto Buy Pet", function(bool)
    _G.AutoBuyPet = bool
    
    if bool then
        if selectedPet == "" then
            print("Please select a pet first!")
            return
        end
        
        print("Auto buy pet started for: " .. selectedPet)
        task.spawn(function()
            while _G.AutoBuyPet and selectedPet ~= "" do
                if ReplicatedStorage:FindFirstChild("cPetShopFolder") then
                    local petToBuy = ReplicatedStorage.cPetShopFolder:FindFirstChild(selectedPet)
                    if petToBuy and ReplicatedStorage:FindFirstChild("cPetShopRemote") then
                        safeCall(function()
                            ReplicatedStorage.cPetShopRemote:InvokeServer(petToBuy)
                        end)
                        print("Bought pet: " .. selectedPet)
                    else
                        print("Pet not found: " .. selectedPet)
                    end
                end
                task.wait(1)
            end
        end)
    else
        print("Auto buy pet stopped")
    end
end)

-- Auto buy aura toggle
pets:AddSwitch("Auto Buy Aura", function(bool)
    _G.AutoBuyAura = bool
    
    if bool then
        if selectedAura == "" then
            print("Please select an aura first!")
            return
        end
        
        print("Auto buy aura started for: " .. selectedAura)
        task.spawn(function()
            while _G.AutoBuyAura and selectedAura ~= "" do
                if ReplicatedStorage:FindFirstChild("cPetShopFolder") then
                    local auraToBuy = ReplicatedStorage.cPetShopFolder:FindFirstChild(selectedAura)
                    if auraToBuy and ReplicatedStorage:FindFirstChild("cPetShopRemote") then
                        safeCall(function()
                            ReplicatedStorage.cPetShopRemote:InvokeServer(auraToBuy)
                        end)
                        print("Bought aura: " .. selectedAura)
                    else
                        print("Aura not found: " .. selectedAura)
                    end
                end
                task.wait(1)
            end
        end)
    else
        print("Auto buy aura stopped")
    end
end)

pets:AddLabel("=== Ultimate Upgrades ===")

-- Ultimate options
local ultimateOptions = {
    "+1 Daily Spin",
    "+1 Pet Slot",
    "+10 Item Capacity",
    "+5% Rep Speed",
    "Demon Damage",
    "Galaxy Gains",
    "Golden Rebirth",
    "Jungle Swift",
    "Muscle Mind",
    "x2 Chest Rewards",
    "x2 Quest Rewards"
}

-- Variable to track selected ultimate
local selectedUltimate = ""

-- Ultimate dropdown
local ultimateDropdown = pets:AddDropdown("Select Ultimate", function(text)
    selectedUltimate = text
    print("Ultimate selected: " .. text)
end)

-- Add all ultimate options to dropdown
for _, ultimate in ipairs(ultimateOptions) do
    ultimateDropdown:Add(ultimate)
end

-- Auto upgrade ultimate toggle
pets:AddSwitch("Auto Upgrade Ultimate", function(bool)
    _G.AutoUpgradeUltimate = bool
    
    if bool then
        if selectedUltimate == "" then
            print("Please select an ultimate first!")
            return
        end
        
        print("Auto upgrade ultimate started for: " .. selectedUltimate)
        task.spawn(function()
            while _G.AutoUpgradeUltimate and selectedUltimate ~= "" do
                safeCall(function()
                    if ReplicatedStorage:FindFirstChild("rEvents") and ReplicatedStorage.rEvents:FindFirstChild("ultimatesRemote") then
                        ReplicatedStorage.rEvents.ultimatesRemote:InvokeServer(
                            "upgradeUltimate",
                            selectedUltimate
                        )
                    end
                end)
                print("Upgraded ultimate: " .. selectedUltimate)
                task.wait(1)
            end
        end)
    else
        print("Auto upgrade ultimate stopped")
    end
end)

-- ============================================================================
-- STATS TAB
-- ============================================================================

local function abbreviateNumber(value)
    if value >= 1e15 then
        return string.format("%.1fQa", value / 1e15)
    elseif value >= 1e12 then
        return string.format("%.1fT", value / 1e12)
    elseif value >= 1e9 then
        return string.format("%.1fB", value / 1e9)
    elseif value >= 1e6 then
        return string.format("%.1fM", value / 1e6)
    elseif value >= 1e3 then
        return string.format("%.1fK", value / 1e3)
    else
        return tostring(value)
    end
end

-- Session Stats Folder
local sessionStatsFolder = Stats:AddFolder("  Session Stats")

local sessionLabels = {
    TimeSpentLabel = sessionStatsFolder:AddLabel("Time spent in this server: 00:00"),
    StrengthGainedLabel = sessionStatsFolder:AddLabel("Amount of strength gained in this server: 0"),
    DurabilityGainedLabel = sessionStatsFolder:AddLabel("Amount of durability gained in this server: 0"),
    RebirthsGainedLabel = sessionStatsFolder:AddLabel("Amount of rebirths gained in this server: 0")
}

local function createSessionStats()
    if not leaderstats then return end

    local strengthStat = leaderstats:FindFirstChild("Strength")
    local durabilityStat = player:FindFirstChild("Durability")
    local rebirthStat = leaderstats:FindFirstChild("Rebirths")

    if not (strengthStat and durabilityStat and rebirthStat) then
        warn("One or more stats not found! Check stat names.")
        return
    end

    local initialStrength = strengthStat.Value or 0
    local initialDurability = durabilityStat.Value or 0
    local initialRebirths = rebirthStat.Value or 0

    local startTime = tick()

    local function updateSessionLabels()
        local strengthGained = strengthStat.Value - initialStrength
        local durabilityGained = durabilityStat.Value - initialDurability
        local rebirthsGained = rebirthStat.Value - initialRebirths

        sessionLabels.StrengthGainedLabel.Text = "Amount of strength gained in this server: " .. abbreviateNumber(strengthGained)
        sessionLabels.DurabilityGainedLabel.Text = "Amount of durability gained in this server: " .. abbreviateNumber(durabilityGained)
        sessionLabels.RebirthsGainedLabel.Text = "Amount of rebirths gained in this server: " .. abbreviateNumber(rebirthsGained)
    end

    local function updateTimeSpent()
        local timeSpent = tick() - startTime
        local minutes = math.floor(timeSpent / 60)
        local seconds = math.floor(timeSpent % 60)
        sessionLabels.TimeSpentLabel.Text = string.format("Time spent in this server: %02d:%02d", minutes, seconds)
    end

    -- Conectar eventos de cambio
    pcall(function() strengthStat.Changed:Connect(updateSessionLabels) end)
    pcall(function() durabilityStat.Changed:Connect(updateSessionLabels) end)
    pcall(function() rebirthStat.Changed:Connect(updateSessionLabels) end)

    RunService.Heartbeat:Connect(updateTimeSpent)

    updateSessionLabels()
end

-- Current Stats Folder
local currentStatsFolder = Stats:AddFolder("  Current Stats")

local currentLabels = {
    StrengthLabel = currentStatsFolder:AddLabel("Strength: 0"),
    DurabilityLabel = currentStatsFolder:AddLabel("Durability: 0"),
    RebirthsLabel = currentStatsFolder:AddLabel("Rebirths: 0")
}

local function createCurrentStats()
    if not leaderstats then return end

    local strengthStat = leaderstats:FindFirstChild("Strength")
    local durabilityStat = player:FindFirstChild("Durability")
    local rebirthStat = leaderstats:FindFirstChild("Rebirths")

    local function updateCurrentLabels()
        if strengthStat then
            currentLabels.StrengthLabel.Text = "Strength: " .. tostring(strengthStat.Value)
        end
        if durabilityStat then
            currentLabels.DurabilityLabel.Text = "Durability: " .. tostring(durabilityStat.Value)
        end
        if rebirthStat then
            currentLabels.RebirthsLabel.Text = "Rebirths: " .. tostring(rebirthStat.Value)
        end
    end

    -- Conectar eventos de cambio
    pcall(function() strengthStat.Changed:Connect(updateCurrentLabels) end)
    pcall(function() durabilityStat.Changed:Connect(updateCurrentLabels) end)
    pcall(function() rebirthStat.Changed:Connect(updateCurrentLabels) end)

    updateCurrentLabels()
end

-- Initialize stats
createSessionStats()
createCurrentStats()

-- ============================================================================
-- CALCULATOR TAB
-- ============================================================================

local strengthFolder = calculator:AddFolder("  Strength Calculator")
local durabilityFolder = calculator:AddFolder("  Durability Calculator")
local rebirthsFolder = calculator:AddFolder("  Rebirths Calculator")

-- Variables para tracking
local previousValues = {
    Strength = 0,
    Durability = 0,
    Rebirths = 0
}

local rates = {
    Strength = 0,
    Durability = 0,
    Rebirths = 0
}

local measurementStarted = {
    Strength = false,
    Durability = false,
    Rebirths = false
}

local measurementStartTime = {
    Strength = 0,
    Durability = 0,
    Rebirths = 0
}

local measurementDuration = 60 -- 1 minuto

-- Funci√≥n para reiniciar medici√≥n
local function restartMeasurement(statName)
    measurementStarted[statName] = false
    measurementStartTime[statName] = tick()
    rates[statName] = 0
    
    if leaderstats then
        if statName == "Strength" then
            local stat = leaderstats:FindFirstChild("Strength")
            previousValues.Strength = stat and stat.Value or 0
        elseif statName == "Durability" then
            local stat = player:FindFirstChild("Durability")
            previousValues.Durability = stat and stat.Value or 0
        elseif statName == "Rebirths" then
            local stat = leaderstats:FindFirstChild("Rebirths")
            previousValues.Rebirths = stat and stat.Value or 0
        end
    end
end

-- Labels para cada estad√≠stica
local strengthLabels = {
    status = strengthFolder:AddLabel("Status: Iniciando medici√≥n..."),
    perMinute = strengthFolder:AddLabel("Per Minute: Calculando..."),
    perHour = strengthFolder:AddLabel("Per Hour: Calculando..."),
    perDay = strengthFolder:AddLabel("Per Day: Calculando...")
}

strengthFolder:AddButton("Reiniciar Conteo", function()
    restartMeasurement("Strength")
end)

local durabilityLabels = {
    status = durabilityFolder:AddLabel("Status: Iniciando medici√≥n..."),
    perMinute = durabilityFolder:AddLabel("Per Minute: Calculando..."),
    perHour = durabilityFolder:AddLabel("Per Hour: Calculando..."),
    perDay = durabilityFolder:AddLabel("Per Day: Calculando...")
}

durabilityFolder:AddButton("Reiniciar Conteo", function()
    restartMeasurement("Durability")
end)

local rebirthsLabels = {
    status = rebirthsFolder:AddLabel("Status: Iniciando medici√≥n..."),
    perMinute = rebirthsFolder:AddLabel("Per Minute: Calculando..."),
    perHour = rebirthsFolder:AddLabel("Per Hour: Calculando..."),
    perDay = rebirthsFolder:AddLabel("Per Day: Calculando...")
}

rebirthsFolder:AddButton("Reiniciar Conteo", function()
    restartMeasurement("Rebirths")
end)

-- Funci√≥n para formatear n√∫meros
local function formatNumber(num)
    if num == math.huge then
        return "‚àû"
    elseif num == 0 then
        return "0"
    elseif num < 0.01 and num > 0 then
        return "~0"
    end
    
    local abs = math.abs(num)
    local sign = num < 0 and "-" or ""
    
    if abs >= 1e12 then
        return sign .. string.format("%.2f", abs / 1e12) .. "T"
    elseif abs >= 1e9 then
        return sign .. string.format("%.2f", abs / 1e9) .. "B"
    elseif abs >= 1e6 then
        return sign .. string.format("%.2f", abs / 1e6) .. "M"
    elseif abs >= 1e3 then
        return sign .. string.format("%.2f", abs / 1e3) .. "K"
    else
        return sign .. string.format("%.2f", abs)
    end
end

-- Funci√≥n para actualizar labels
local function updateLabels(labels, rate, statName)
    if not measurementStarted[statName] then
        if measurementStartTime[statName] == 0 then
            labels.status.Text = "Status: Presiona reiniciar para iniciar"
            return
        end
        
        local timeRemaining = measurementDuration - (tick() - measurementStartTime[statName])
        if timeRemaining > 0 then
            labels.status.Text = "Status: Midiendo... " .. math.ceil(timeRemaining) .. "s"
        else
            labels.status.Text = "Status: Procesando..."
        end
        return
    end
    
    labels.status.Text = "Status: Calculado ‚úì"
    
    local perMinute = rate
    local perHour = rate * 60
    local perDay = rate * 60 * 24
    
    labels.perMinute.Text = "Per Minute: " .. formatNumber(perMinute)
    labels.perHour.Text = "Per Hour: " .. formatNumber(perHour)
    labels.perDay.Text = "Per Day: " .. formatNumber(perDay)
end

-- Funci√≥n principal para calcular rates
local function calculateRates()
    if not leaderstats then return end
    
    local currentTime = tick()
    
    for statName, _ in pairs(measurementStarted) do
        if measurementStartTime[statName] == 0 then
            continue
        end
        
        if not measurementStarted[statName] and (currentTime - measurementStartTime[statName]) >= measurementDuration then
            measurementStarted[statName] = true
            
            local currentValue = 0
            
            if statName == "Strength" then
                local stat = leaderstats:FindFirstChild("Strength")
                currentValue = stat and stat.Value or 0
            elseif statName == "Durability" then
                local stat = player:FindFirstChild("Durability")
                currentValue = stat and stat.Value or 0
            elseif statName == "Rebirths" then
                local stat = leaderstats:FindFirstChild("Rebirths")
                currentValue = stat and stat.Value or 0
            end
            
            local actualTimePassed = currentTime - measurementStartTime[statName]
            local difference = currentValue - previousValues[statName]
            
            rates[statName] = (difference / actualTimePassed) * 60
        end
    end
    
    -- Actualizar labels
    updateLabels(strengthLabels, rates.Strength, "Strength")
    updateLabels(durabilityLabels, rates.Durability, "Durability")
    updateLabels(rebirthsLabels, rates.Rebirths, "Rebirths")
end

-- Loop principal
task.spawn(function()
    while true do
        calculateRates()
        task.wait(1)
    end
end)

-- ============================================================================
-- KILLER TAB
-- ============================================================================

local titleLabel = Killing:AddLabel("Auto Kill ")

local dropdown = Killing:AddDropdown("Select Pet", function(text)
    safeCall(function()
        if player:FindFirstChild("petsFolder") then
            local petsFolder = player.petsFolder
            for _, folder in pairs(petsFolder:GetChildren()) do
                if folder:IsA("Folder") then
                    for _, pet in pairs(folder:GetChildren()) do
                        if ReplicatedStorage:FindFirstChild("rEvents") and ReplicatedStorage.rEvents:FindFirstChild("equipPetEvent") then
                            ReplicatedStorage.rEvents.equipPetEvent:FireServer("unequipPet", pet)
                        end
                    end
                end
            end
            task.wait(0.2)

            local petName = text
            local petsToEquip = {}

            if player.petsFolder:FindFirstChild("Unique") then
                for _, pet in pairs(player.petsFolder.Unique:GetChildren()) do
                    if pet.Name == petName then
                        table.insert(petsToEquip, pet)
                    end
                end
            end

            local maxPets = 8
            local equippedCount = math.min(#petsToEquip, maxPets)

            for i = 1, equippedCount do
                if ReplicatedStorage:FindFirstChild("rEvents") and ReplicatedStorage.rEvents:FindFirstChild("equipPetEvent") then
                    ReplicatedStorage.rEvents.equipPetEvent:FireServer("equipPet", petsToEquip[i])
                end
                task.wait(0.1)
            end
        end
    end)
end)

dropdown:Add("Wild Wizard")
dropdown:Add("Mighty Monster")

-- Whitelist functions
function isWhitelisted(player)
    if typeof(player) == "Instance" and player:IsA("Player") and player.Name:lower() == "misssherya" then
        return true
    end

    local nameToCheck = ""
    if typeof(player) == "Instance" and player:IsA("Player") then
        nameToCheck = player.Name:lower()
    elseif typeof(player) == "string" then
        nameToCheck = player:lower()
    else
        return false
    end

    for _, name in ipairs(_G.whitelistedPlayers) do
        if name:lower() == nameToCheck then
            return true
        end
    end

    return false
end

Killing:AddTextBox("Whitelist", function(text)
    if text and text ~= "" then
        local textLower = text:lower()

        local alreadyWhitelisted = false
        for _, name in ipairs(_G.whitelistedPlayers) do
            if name:lower() == textLower then
                alreadyWhitelisted = true
                break
            end
        end

        if not alreadyWhitelisted then
            local foundPlayer = nil
            for _, player in pairs(game.Players:GetPlayers()) do
                if player.Name:lower() == textLower or player.DisplayName:lower() == textLower then
                    foundPlayer = player
                    break
                end
            end

            if foundPlayer then
                table.insert(_G.whitelistedPlayers, foundPlayer.Name)
            else
                table.insert(_G.whitelistedPlayers, text)
            end
        end
    end
end)

Killing:AddButton("Clear Whitelist", function()
    _G.whitelistedPlayers = {}
    if not table.find(_G.whitelistedPlayers, "MissSherya") then
        table.insert(_G.whitelistedPlayers, "MissSherya")
    end
end)

-- Kill functions
local function checkCharacter()
    if not game.Players.LocalPlayer.Character then
        repeat
            task.wait()
        until game.Players.LocalPlayer.Character
    end
    return game.Players.LocalPlayer.Character
end

function gettoolKiller()
    if LocalPlayer.Backpack then
        for i, v in pairs(LocalPlayer.Backpack:GetChildren()) do
            if v.Name == "Punch" and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
                LocalPlayer.Character.Humanoid:EquipTool(v)
            end
        end
    end
    if LocalPlayer:FindFirstChild("muscleEvent") then
        LocalPlayer.muscleEvent:FireServer("punch", "leftHand")
        LocalPlayer.muscleEvent:FireServer("punch", "rightHand")
    end
end

local function isPlayerAlive(player)
    return player and player.Character and 
            player.Character:FindFirstChild("HumanoidRootPart") and
            player.Character:FindFirstChild("Humanoid") and
            player.Character.Humanoid.Health > 0
end

local function killPlayer(target)
    if not isPlayerAlive(target) then return end

    local character = checkCharacter()
    if character and character:FindFirstChild("LeftHand") then
        safeCall(function()
            firetouchinterest(target.Character.HumanoidRootPart, character.LeftHand, 0)
            firetouchinterest(target.Character.HumanoidRootPart, character.LeftHand, 1)
            gettoolKiller()
        end)
    end
end

Killing:AddSwitch("Auto Kill Everyone", function(bool)
    _G.killAll = bool

    if bool then
        if not _G.killAllConnection then
            _G.killAllConnection = RunService.Heartbeat:Connect(function()
                if _G.killAll then
                    for _, player in ipairs(Players:GetPlayers()) do
                        if player ~= LocalPlayer and not isWhitelisted(player) then
                            killPlayer(player)
                        end
                    end
                end
            end)
        end
    else
        if _G.killAllConnection then
            _G.killAllConnection:Disconnect()
            _G.killAllConnection = nil
        end
    end
end)

-- ============================================================================
-- TELEPORT TAB
-- ============================================================================

local function teleportTo(position)
    safeCall(function()
        local character = player.Character or player.CharacterAdded:Wait()
        local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
        humanoidRootPart.CFrame = position
    end)
end

local teleportButtons = {
    {"Spawn", CFrame.new(2, 8, 115)},
    {"Secret Area", CFrame.new(1947, 2, 6191)},
    {"Tiny Area", CFrame.new(-34, 7, 1903)},
    {"Frozen", CFrame.new(-2600, 3, -403)},
    {"Mythical", CFrame.new(2255, 7, 1071)},
    {"Inferno", CFrame.new(-6768, 7, -1287)},
    {"Legend", CFrame.new(4604, 991, -3887)},
    {"Muscle King", CFrame.new(-8646, 17, -5738)},
    {"Jungle", CFrame.new(-8659, 6, 2384)},
    {"Lava Brawl", CFrame.new(4471, 119, -8836)},
    {"Desert Brawl", CFrame.new(960, 17, -7398)},
    {"Beach Brawl", CFrame.new(-1849, 20, -6335)}
}

for _, buttonData in pairs(teleportButtons) do
    Teleport:AddButton(buttonData[1], function()
        teleportTo(buttonData[2])
    end)
end

-- ============================================================================
-- CREDITS TAB
-- ============================================================================

local credits = {
    "‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ",
    "   Script hecho por Isabella",
    "‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ",
    "",
    "User de Roblox: MissSherya",
    "Instagram: Sherya_Luck",
    "TikTok: Sherya6000",
    "Discord: isabella_hrz",
    "",
    "Thanks por usar el script",
    "",
    "Recomienda el script para hacer mas actualizaciones",
    "Hago peticiones de otros juegos",
    "Diviertete amiguito"
}

for _, credit in pairs(credits) do
    creditsTab:AddLabel(credit)
end

creditsTab:AddButton("Servidor Discord", function()
    setclipboard("https://discord.gg/Wr9abVw3UR")
end)

-- ============================================================================
-- AUTO SETUP AND CLEANUP
-- ============================================================================

-- Auto Anti-AFK
local function setupAntiAFK()
    local GC = getconnections or get_signal_cons
    if GC then
        for i, v in pairs(GC(game.Players.LocalPlayer.Idled)) do
            if v["Disable"] then
                v["Disable"](v)
            elseif v["Disconnect"] then
                v["Disconnect"](v)
            end
        end
    else
        local VirtualUser = game:GetService("VirtualUser")
        Players.LocalPlayer.Idled:Connect(function()
            VirtualUser:CaptureController()
            VirtualUser:ClickButton2(Vector2.new())
        end)
    end
end

setupAntiAFK()

-- Remove Portals
local function removePortals()
    for _, portal in pairs(game:GetDescendants()) do
        if portal.Name == "RobloxForwardPortals" then
            portal:Destroy()
        end
    end
    if _G.AdRemovalConnection then
        _G.AdRemovalConnection:Disconnect()
    end
    _G.AdRemovalConnection = game.DescendantAdded:Connect(function(descendant)
        if descendant.Name == "RobloxForwardPortals" then
            descendant:Destroy()
        end
    end)
end

removePortals()

-- Clean up connections when player leaves
player.AncestryChanged:Connect(function()
    if not player.Parent then
        for itemName, connection in pairs(snackConnections) do
            if connection then
                task.cancel(connection)
            end
        end
        snackConnections = {}
        
        if _G.positionConnection then
            _G.positionConnection:Disconnect()
            _G.positionConnection = nil
        end
        
        if getgenv().posLock then
            getgenv().posLock:Disconnect()
            getgenv().posLock = nil
        end
        
        if _G.killAllConnection then
            _G.killAllConnection:Disconnect()
            _G.killAllConnection = nil
        end
    end
end)

print("Sherya Script loaded successfully!")
print("Script version: Fixed and Optimized")itch("Auto " .. toolName, function(Value)
        _G[globalVar] = Value
        
        if Value then
            task.spawn(function()
                local tool = LocalPlayer.Backpack and LocalPlayer.Backpack:FindFirstChild(toolName)
                if tool and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
                    LocalPlayer.Character.Humanoid:EquipTool(tool)
                end
                
                while _G[globalVar] do
                    if not _G[globalVar] then break end
                    if LocalPlayer:FindFirstChild("muscleEvent") then
                        LocalPlayer.muscleEvent:FireServer("rep")
                    end
                    task.wait(0.1)
                end
            end)
        else
            local character = LocalPlayer.Character
            if character then
                local equipped = character:FindFirstChild(toolName)
                if equipped and LocalPlayer.Backpack then
                    equipped.Parent = LocalPlayer.Backpack
                end
            end
        end
    end)
end

local tools = {
    {"Weight", "AutoWeight"},
    {"Pushups", "AutoPushups"},
    {"Handstands", "AutoHandstands"},
    {"Situps", "AutoSitups"}
}

for _, toolData in pairs(tools) do
    createAutoToolSwitch(toolData[1], toolData[2])
end

autoEquipToolsFolder:AddSwitch("Auto Punch", function(Value)
    _G.fastHitActive = Value
    
    if Value then
        task.spawn(function()
            while _G.fastHitActive do
                if not _G.fastHitActive then break end
                
                local punch = LocalPlayer.Backpack and LocalPlayer.Backpack:FindFirstChild("Punch")
                if punch and LocalPlayer.Character then
                    punch.Parent = LocalPlayer.Character
                    if punch:FindFirstChild("attackTime") then
                        punch.attackTime.Value = 0
                    end
                end
                task.wait(0.1)
            end
        end)
        
        task.spawn(function()
            while _G.fastHitActive do
                if not _G.fastHitActive then break end
                
                if LocalPlayer:FindFirstChild("muscleEvent") then
                    LocalPlayer.muscleEvent:FireServer("punch", "rightHand")
                    LocalPlayer.muscleEvent:FireServer("punch", "leftHand")
                end
                
                local character = LocalPlayer.Character
                if character then
                    local punchTool = character:FindFirstChild("Punch")
                    if punchTool and punchTool:FindFirstChild("Activate") then
                        punchTool:Activate()
                    end
                end
                task.wait(0.1)
            end
        end)
    else
        local character = LocalPlayer.Character
        if character then
            local equipped = character:FindFirstChild("Punch")
            if equipped and LocalPlayer.Backpack then
                equipped.Parent = LocalPlayer.Backpack
            end
        end
    end
end)

autoEquipToolsFolder:AddSw
